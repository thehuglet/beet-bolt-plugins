from beet import Language
from hashlib import sha512
from typing import Hashable

config = {
    "path_prefix": ctx.meta.get("bolt-item",{}).get("path_prefix") or "bolt-item/",
}

component_names = [
    "attribute_modifiers",
    # "axolotl/variant",
    "banner_patterns",
    "base_color",
    "bees",
    "block_entity_data",
    "block_state",
    "blocks_attacks",
    "break_sound",
    "bucket_entity_data",
    "bundle_contents",
    "can_break",
    "can_place_on",
    # "cat/collar",
    # "cat/variant",
    "charged_projectiles",
    "consumable",
    "container",
    "container_loot",
    "creative_slot_lock",
    "custom_data",
    "custom_model_data",
    "custom_name",
    "damage",
    "damage_resistant",
    "death_protection",
    "debug_stick_state",
    "dyed_color",
    "enchantable",
    "enchantment_glint_override",
    "enchantments",
    "entity_data",
    "equippable",
    "firework_explosion",
    "fireworks",
    "food",
    # "fox/variant",
    # "frog/variant",
    "glider",
    # "horse/variant",
    "instrument",
    "intangible_projectile",
    "item_model",
    "item_name",
    "jukebox_playable",
    # "llama/variant",
    "lock",
    "lodestone_tracker",
    "lore",
    "map_color",
    "map_decorations",
    "map_id",
    "map_post_processing",
    "max_damage",
    "max_stack_size",
    # "mooshroom/variant",
    "note_block_sound",
    "ominous_bottle_amplifier",
    # "painting/variant",
    # "parrot/variant",
    # "pig/variant",
    "pot_decorations",
    "potion_contents",
    "potion_duration_scale",
    "profile",
    "provides_banner_patterns",
    "provides_trim_material",
    # "rabbit/variant",
    "rarity",
    "recipes",
    "repair_cost",
    "repairable",
    # "salmon/size",
    # "sheep/color",
    # "shulker/color",
    "stored_enchantments",
    "suspicious_stew_effects",
    "tool",
    "tooltip_display",
    "tooltip_style",
    "trim",
    # "tropical_fish/base_color",
    # "tropical_fish/pattern",
    # "tropical_fish/pattern_color",
    "unbreakable",
    "use_cooldown",
    "use_remainder",
    # "villager/variant",
    "weapon",
    # "wolf/collar",
    # "wolf/variant",
    "writable_book_content",
    "written_book_content"
]

registered_paths = []

#>########### default pack stuff ###########<#

def _add_tungsten_base():
    if not _should_register("minecraft:load"):
        return
    append function_tag minecraft:load {"values":["bolt-item:load"]}
    function bolt-item:load:
        scoreboard objectives add bolt-item.head dummy
        scoreboard objectives add bolt-item.chest dummy
        scoreboard objectives add bolt-item.legs dummy
        scoreboard objectives add bolt-item.feet dummy
        scoreboard objectives add bolt-item.mainhand dummy
        scoreboard objectives add bolt-item.offhand dummy

    for slot, item_location in [
        ("mainhand", "SelectedItem"),
        ("offhand", "Inventory[{Slot:-106b}]"),
        ("head", "Inventory[{Slot:103b}]"),
        ("chest", "Inventory[{Slot:102b}]"),
        ("legs", "Inventory[{Slot:101b}]"),
        ("feet", "Inventory[{Slot:100b}]"),
    ]:
        function_path = f"bolt-item:tungsten/{slot}"
        tungsten_path = f"tungsten:swap/{slot}"
        unequip_tag_path = f"bolt-item:tungsten/{slot}/unequip"
        equip_tag_path = f"bolt-item:tungsten/{slot}/equip"

        append function_tag tungsten_path {"values":[function_path]}
        function function_path:
            function f"#{unequip_tag_path}"
            store result score @s f"bolt-item.{slot}" data get entity @s f"{item_location}.components.'minecraft:custom_data'.bolt-item.hash"
            function f"#{equip_tag_path}"

def _add_regive_base():
    if not _should_register("bolt-item:regive"):
        return
    function bolt-item:regive_mainhand:
        item replace entity @s weapon.mainhand with air
        $loot replace entity @s weapon.mainhand loot {"pools":[{"rolls":1,"entries":[{"type":"minecraft:item","name":"$(id)","functions":[{"function":"minecraft:set_count","count":$(count)},{"function":"minecraft:set_components","components":$(components)}]}]}]}

    function bolt-item:regive_offhand:
        item replace entity @s weapon.offhand with air
        $loot replace entity @s weapon.offhand loot {"pools":[{"rolls":1,"entries":[{"type":"minecraft:item","name":"$(id)","functions":[{"function":"minecraft:set_count","count":$(count)},{"function":"minecraft:set_components","components":$(components)}]}]}]}

#>########### classes ###########<#

class ComponentProxy:
    __mode__ = 'all'
    def __setattr__(self, name, value):
        if name == '__mode__' or self.__mode__ == 'all':
            self.__dict__[name] = value
        elif (self.__mode__ == 'merge') and (name in component_names):
            self.__dict__[name] = deep_merge(getattr(self, name, getattr(self.__class__, name, None)), value)
        elif (self.__mode__ == 'set') and (name in component_names):
            self.__dict__[name] = value
        else:
            raise Exception(f'[bolt-item]: "{name}" is not a valid component')

#>########### transformers ###########<#

def translate_item_name(cls, v) -> bool:
    if type(v) != str:
        return v
    trans_string = f"item.{cls.namespace}.{cls.id}"
    lang_file = f"{cls.namespace}:en_us"
    lang = ctx.assets.languages.get(lang_file, {data:{}}).data
    lang[trans_string] = v
    ctx.assets.languages[lang_file] = Language(lang)
    return {"translate":trans_string}

#>########### decorators ###########<#

def item(cls: type):
    if cls.__bases__[0] != object:
        for parent in cls.__bases__:
            # gather custom components
            custom_components = []
            for k, v in parent.__dict__.items():
                if (k not in cls.__dict__) and (callable(v) and 'custom_component' in v.__dict__):
                    custom_components.append(v.custom_component)
            # copy from parent
            for k, v in parent.__dict__.items():
                if (k not in cls.__dict__) and (
                    (k in component_names) or
                    (k in custom_components) or
                    (callable(v) and 'transforms_component' in v.__dict__) or
                    (callable(v) and 'custom_component' in v.__dict__) or
                    (callable(v) and v.__dict__.get('decorator') and callable(v.decorator))
                ):
                    setattr(cls, k, v)

    # initialize component proxy
    cls.component_proxy = ComponentProxy()
    # ensure an id is set
    if "id" not in cls.__dict__:
        cls.id = _id_from_class_name(cls.__name__)
    cls.component_proxy.id = cls.id
    # store namespace for easy access
    cls.namespace = cls.__module__.split(':')[0]
    cls.component_proxy.namespace = cls.namespace
    # create int hash from id
    cls.hash = _int_hash(f"{cls.namespace}:{cls.id}")
    cls.component_proxy.hash = cls.hash
    # lock component proxy
    cls.component_proxy.__mode__ = 'merge'

    # create transformer map and gather custom components
    callables = []
    def get_priority(f):
        return f.priority
    for k, v in cls.__dict__.items():
        if callable(v) and ('transforms_component' in v.__dict__ or 'custom_component' in v.__dict__):
            callables.append(v)
    callables.sort(key=get_priority)

    # set from class
    for k, v in cls.__dict__.items():
        if k in component_names:
            setattr(cls.component_proxy, k, v)

    # run all callables
    for c in callables:
        # transfromers can replace components
        if 'transforms_component' in c.__dict__:
            res = c(cls.component_proxy, getattr(cls.component_proxy, c.transforms_component, None))
            cls.component_proxy.__mode__ = 'set'
            setattr(cls.component_proxy, c.transforms_component, res)
            cls.component_proxy.__mode__ = 'merge'
        # custom components arent real components
        if 'custom_component' in c.__dict__:
            c(cls.component_proxy, getattr(cls, c.custom_component, None))
        # run decorators
        if 'decorator' in c.__dict__:
            c(cls.component_proxy)

    # add necessary bolt item custom data
    setattr(cls.component_proxy, "custom_data", {"bolt-item":{"id":f"{cls.namespace}:{cls.id}","hash":cls.hash}})

    cls.components = _get_mc_components(cls.component_proxy)

    def _loot_table(path: str = f'{cls.namespace}:{config["path_prefix"]}item/{cls.id}'):
        loot_table path {"pools": [{ "rolls": 1, "entries": [{
            "type": "minecraft:item",
            "name": "minecraft:poisonous_potato",
            "functions": [{
                "function": "minecraft:set_components",
                "components": cls.components
            }]
        }]}]}
    cls.loot_table = _loot_table

    def _recipe(recipe: list[list[str]] | list[str] | dict[str, str], path: str = f'{cls.namespace}:{config["path_prefix"]}item/{cls.id}'):
        if type(recipe) == dict and 'input' in recipe and 'material' in recipe:
            recipe path {
                "type": "minecraft:crafting_transmute",
                "input": recipe['input'],
                "material": recipe['material'],
                "result": {
                    "id": "minecraft:poisonous_potato",
                    "components": cls.components,
                    "count": 1
                }
            }
        elif type(recipe) == list and type(recipe[0]) == str:
            recipe path {
                "type": "minecraft:crafting_shapeless",
                "ingredients": recipe,
                "result": {
                    "id": "minecraft:poisonous_potato",
                    "components": cls.components,
                    "count": 1
                }
            }
        else:
            item_pattern_map = {}
            current = 97
            pattern = recipe
            for i, row in enumerate(recipe):
                for j, item in enumerate(row):
                    if item not in item_pattern_map:
                        item_pattern_map[item] = chr(current)
                        current += 1
                    pattern[i][j] = item_pattern_map[item]

            keys = {}
            for k, v in item_pattern_map.items():
                keys[v] = k

            recipe_pattern = []
            for row in pattern:
                recipe_pattern.append("".join(row))

            recipe path {
                "type": "minecraft:crafting_shaped",
                "pattern": recipe_pattern,
                "key": keys,
                "result": {
                    "id": "minecraft:poisonous_potato",
                    "components": cls.components,
                    "count": 1
                }
            }
    cls.recipe = _recipe

    return cls

def transformer(component: str, priority = 0):
    if component not in component_names:
        raise Exception(f'[bolt-item]: "{component}" is not a valid component name')
    def decorator(func):
        func.transforms_component = component
        func.priority = priority
        return func
    return decorator

def custom_component(component: str, priority = 1):
    def decorator(func):
        func.custom_component = component
        func.priority = priority
        return func
    return decorator

def on_consume(return_item = False, priority = 10):
    def decorator(func):
        def on_consume_impl(proxy: ComponentProxy):
            path = f"{proxy.namespace}:{config['path_prefix']}item/{proxy.id}/on_consume/{func.__name__}"

            advancement path {"criteria": { "criteria": {
                "trigger": "minecraft:consume_item", "conditions": {
                "item": { "predicates": { "minecraft:custom_data": {
                    "bolt-item": { "id": f"{proxy.namespace}:{proxy.id}" }
                }}}}}},
                "rewards": { "function": path }
            }

            function path:
                advancement revoke @s only path
                if return_item:
                    _add_regive_base()
                    unless items entity @s weapon.mainhand *[minecraft:custom_data~{bolt-item:{id:(f"{proxy.namespace}:{proxy.id}")}}] function bolt-item:regive_offhand with entity @s Inventory[{Slot:-106b}]
                    if items entity @s weapon.mainhand *[minecraft:custom_data~{bolt-item:{id:(f"{proxy.namespace}:{proxy.id}")}}] function bolt-item:regive_mainhand with entity @s SelectedItem
                func()
        on_consume_impl.decorator = "on_consume"
        on_consume_impl.priority = priority
        return on_consume_impl
    return decorator

def on_equip(slot: str, priority = 10):
    def decorator(func):
        def on_equip_impl(proxy: ComponentProxy):
            _assert_is_slot(slot)
            _add_tungsten_base()
            _add_tungsten_components(proxy, slot)
            equip_tag_path = f"bolt-item:tungsten/{slot}/equip"
            equip_function_path = f"{proxy.namespace}:{config['path_prefix']}tungsten/{slot}/equip"
            function_path = f"{proxy.namespace}:{config['path_prefix']}item/{proxy.id}/on_equip/{slot}/{func.__name__}"

            if _should_register(equip_tag_path):
                append function_tag equip_tag_path {"values":[equip_function_path]}
            append function equip_function_path:
                if score @s f"bolt-item.{slot}" matches (proxy.hash) function function_path:
                    func()
        on_equip_impl.decorator = "on_equip"
        on_equip_impl.priority = priority
        return on_equip_impl
    return decorator

def on_unequip(slot: str, priority = 10):
    def decorator(func):
        def on_unequip_impl(proxy: ComponentProxy):
            _assert_is_slot(slot)
            _add_tungsten_base()
            _add_tungsten_components(proxy, slot)
            unequip_tag_path = f"bolt-item:tungsten/{slot}/unequip"
            unequip_function_path = f"{proxy.namespace}:{config['path_prefix']}tungsten/{slot}/unequip"
            function_path = f"{proxy.namespace}:{config['path_prefix']}item/{proxy.id}/on_unequip/{slot}/{func.__name__}"

            if _should_register(unequip_tag_path):
                append function_tag unequip_tag_path {"values":[unequip_function_path]}
            append function unequip_function_path:
                if score @s f"bolt-item.{slot}" matches (proxy.hash) function function_path:
                    func()
        on_unequip_impl.decorator = "on_unequip"
        on_unequip_impl.priority = priority
        return on_unequip_impl
    return decorator

def on_attack(slot: str = "mainhand", priority = 10):
    def decorator(func):
        def on_attack_impl(proxy: ComponentProxy):
            _assert_is_slot(slot)
            _add_tungsten_base()
            _add_tungsten_components(proxy, slot)

            function_path = f"{proxy.namespace}:{config['path_prefix']}item/{proxy.id}/on_attack/{slot}/{func.__name__}"
            player_hurt_entity_function_path = f"{proxy.namespace}:{config['path_prefix']}argon/player_hurt_entity"

            if _should_register("argon:player_hurt_entity"):
                append function_tag argon:player_hurt_entity {"values":[player_hurt_entity_function_path]}
                function player_hurt_entity_function_path:
                    on attacker store result score .check bolt-item.mainhand data get entity @s SelectedItem.components.minecraft:custom_data.bolt-item.hash
                    on attacker store result score .check bolt-item.offhand data get entity @s Inventory[{Slot:-106b}].components.minecraft:custom_data.bolt-item.hash
                    on attacker store result score .check bolt-item.head data get entity @s Inventory[{Slot:103b}].components.minecraft:custom_data.bolt-item.hash
                    on attacker store result score .check bolt-item.chest data get entity @s Inventory[{Slot:102b}].components.minecraft:custom_data.bolt-item.hash
                    on attacker store result score .check bolt-item.legs data get entity @s Inventory[{Slot:101b}].components.minecraft:custom_data.bolt-item.hash
                    on attacker store result score .check bolt-item.feet data get entity @s Inventory[{Slot:100b}].components.minecraft:custom_data.bolt-item.hash

            append function player_hurt_entity_function_path:
                if score .check f"bolt-item.{slot}" matches (proxy.hash) function function_path:
                    func()
        on_attack_impl.decorator = "on_attack"
        on_attack_impl.priority = priority
        return on_attack_impl
    return decorator

def on_attacked(slot: str = "mainhand", priority = 10):
    def decorator(func):
        def on_attacked_impl(proxy: ComponentProxy):
            _assert_is_slot(slot)

            function_path = f"{proxy.namespace}:{config['path_prefix']}item/{proxy.id}/on_attacked/{slot}/{func.__name__}"
            entity_hurt_player_function_path = f"{proxy.namespace}:{config['path_prefix']}argon/entity_hurt_player"

            if _should_register("argon:entity_hurt_player"):
                append function_tag argon:entity_hurt_player {"values":[entity_hurt_player_function_path]}

            slot_type = "armor"
            if slot in ["mainhand","offhand"]:
                slot_type = "weapon"

            append function entity_hurt_player_function_path:
                if items entity @s f"{slot_type}.{slot}" *[custom_data~{bolt-item:{id:f"{proxy.namespace}:{proxy.id}"}}] function function_path:
                    func()
        on_attacked_impl.decorator = "on_attacked"
        on_attacked_impl.priority = priority
        return on_attacked_impl
    return decorator

#>########### helpers ###########<#

def deep_merge(base, result):
    if base == None:
        return result
    if result == None:
        return base
    if not (isinstance(base, dict) and isinstance(result, dict)):
        if isinstance(base, list) and isinstance(result, list):
            return _combine_lists(base, result)
        return result
    for k, v in result.items():
        if k in base:
            if isinstance(v, dict) and isinstance(base[k], dict):
                base[k] = deep_merge(base[k], v)
            elif isinstance(v, list) and isinstance(base[k], list):
                base[k] = _combine_lists(base[k], v)
            else:
                base[k] = v
        else:
            base[k] = v
    return base

def _combine_lists(l1, l2):
    for e in (l1 + l2):
        if not isinstance(e, Hashable):
            return l1 + l2
    return list(set(l1 + l2))

def _should_register(path):
    global registered_paths
    if path not in registered_paths:
        registered_paths.append(path)
        return True
    return False

def _id_from_class_name(name: str) -> str:
    out_id = name[0].lower()
    for c in name[1:]:
        if c.isupper():
            out_id += '_' + c.lower()
        else:
            out_id += c
    return out_id

def _assert_is_slot(slot: str):
    if slot not in ["head","chest","legs","feet","mainhand","offhand"]:
        raise Exception(f'[bolt-item]: "{slot}" is not a valid slot')

def _add_tungsten_components(proxy: ComponentProxy, slot: str):
    attribute_modifiers_components = getattr(proxy, "attribute_modifiers", [])
    tungsten_slot_registered = False
    for modifier in attribute_modifiers_components:
        if modifier["type"] == "minecraft:luck" and modifier["id"] == f"tungsten:{slot}":
            tungsten_slot_registered = True
            break
    if not tungsten_slot_registered:
        proxy.attribute_modifiers = [{"type":"minecraft:luck","id":f"tungsten:{slot}","amount":-9.094947017729282e-13,"operation":"add_value","slot":slot}]
        proxy.tooltip_display = {"hidden_components":["minecraft:attribute_modifiers"]}

def _int_hash(s: str) -> int:
    hash_object = sha512()
    hash_object.update(s.encode('utf-8'))
    hex_digest = hash_object.hexdigest()
    int_digest = int(hex_digest, 16)
    truncated_int = int_digest & 4294967295
    if truncated_int > 2147483647:
        truncated_int -= 4294967296
    return truncated_int

def _get_mc_components(proxy: ComponentProxy) -> dict:
    cmpnts = {
        "!minecraft:consumable": {},
        "!minecraft:food": {},
    }

    for k, v in proxy.__dict__.items():
        if k not in component_names or v == None:
            continue
        cmpnts["minecraft:" + k] = v

    if "minecraft:food" in cmpnts:
        del cmpnts["!minecraft:food"]
    if "minecraft:consumable" in cmpnts:
        del cmpnts["!minecraft:consumable"]

    return cmpnts
